{"name":"Jseats","tagline":"JSeats is a java implementation of common electoral seat allocation algorithms.","body":"JSeats [![Build Status](https://travis-ci.org/pau-minoves/jseats.svg?branch=master)](https://travis-ci.org/pau-minoves/jseats)\r\n======\r\n\r\nJSeats is a java implementation of common electoral seat allocation algorithms.\r\n\r\n## Getting started\r\n\r\nThe JSeats library offers a seat allocation processor based on the following simple architecture:\r\n\r\n![alt text](https://github.com/pau-minoves/jseats/blob/master/src/site/resources/jseats_architecture.png \"JSeats architecture\")\r\n\r\nYou can have example usages here:\r\n\r\n * Java API example [usage](src/test/java/org/jseats/unit/ExampleProcessorTest.java)\r\n * BDD [stories](src/test/resources/stories)\r\n\r\n## Supported methods\r\n \r\n * Majority Method\r\n \t* Simple (FPTP or [First-Past-The-Post](http://en.wikipedia.org/wiki/First-past-the-post_voting))\r\n    * Qualified\r\n    * Absolute\r\n * Ranked Method\r\n    * By votes.\r\n * Equal Proportions Method (aka [Huntington-Hill](http://en.wikipedia.org/wiki/Huntington%E2%80%93Hill_method))\r\n * [Largest Remainder Method](http://en.wikipedia.org/wiki/Largest_remainder_method)\r\n \t* Hare\r\n \t* Droop\r\n \t* Imperiali\r\n * [Highest Averages Method](http://en.wikipedia.org/wiki/Highest_averages_method)\r\n \t* D'Hondt\r\n \t* Sainte-Laguë (Webster)\r\n \t\t* Supports user provided first divisor (Modified Sainte-Laguë)\r\n \t* Imperiali\r\n \t* Danish\r\n\r\n## Usage\r\n\r\nCurrently JSeats provides both a clean java API and a command line launcher. A web interface is planned. The command line looks like this:\r\n\r\n```\r\nUsage: JSeats [options]\r\n  Options:\r\n    -c, --candidate\r\n       Add candidate to tally. Candidates follow the format Name:Votes.\r\n    -h, --help\r\n       Print this message.\r\n       Default: false\r\n    -ic, --input-config\r\n       Configuration input file.\r\n    -it, --input-tally\r\n       Tally input file. Overrides tally provided in configuration via\r\n       --input-config, if any.\r\n    -itb, --interactive-tie-breaker\r\n       Resolve ties interactively on the console. Overrides --tie-breaker.\r\n       Default: false\r\n    -ld, --list-decorators\r\n       List built-in result decorators.\r\n       Default: false\r\n    -lf, --list-filters\r\n       List built-in tally filters.\r\n       Default: false\r\n    -lm, --list-methods\r\n       List built-in seat allocation methods.\r\n       Default: false\r\n    -m, --method\r\n       Seat allocation method to use. See --list-methods for available methods.\r\n    -oc, --output-config\r\n       Configuration output file.\r\n    -o, --output-result\r\n       Result output file.\r\n    -ot, --output-tally\r\n       Tally output file.\r\n    -pv, --potential-votes\r\n       Potential votes. If not set, defaults to effective votes (sum of all\r\n       casted votes).\r\n       Default: -1\r\n    -d, --processor-property\r\n       Processor properties as in -D numberOfSeats=105.\r\n    -tb, --tie-breaker\r\n       Resolve ties using provided tie breaker\r\n    -v, --verbose\r\n       Increase level of verbosity.\r\n       Default: false\r\n```\r\n\r\n","google":"UA-58822800-1","note":"Don't delete this file! It's used internally to help with page regeneration."}